-- Format module: HTML entities processing
local M = {}

-- HTML entities mapping
M.html_entities = {
	["&nbsp;"] = " ",
	["&#39;"] = "'",
	["&quot;"] = '"',
	["&lt;"] = "<",
	["&gt;"] = ">",
	["&amp;"] = "&",
	["&ndash;"] = "–",
	["&mdash;"] = "—",
	["&#8594;"] = "→",
	["&#8592;"] = "←",
	["&#8593;"] = "↑",
	["&#8595;"] = "↓",
	["&#8596;"] = "↔",
	["&le;"] = "≤",
	["&ge;"] = "≥",
	["&ne;"] = "≠",
	["&asymp;"] = "≈",
	["&#10;"] = "\n",
	["&bull;"] = "•",
	["&ast;"] = "*",
	-- Add floor and ceiling symbols
	["&lfloor;"] = "⌊",
	["&rfloor;"] = "⌋",
	["&lceil;"] = "⌈",
	["&rceil;"] = "⌉",
	-- Common math symbols
	["&times;"] = "×",
	["&divide;"] = "÷",
	["&minus;"] = "−",
	["&plusmn;"] = "±",
	["&sum;"] = "∑",
	["&prod;"] = "∏",
	["&int;"] = "∫",
	["&part;"] = "∂",
	["&infin;"] = "∞",
	["&prop;"] = "∝",
	["&equiv;"] = "≡",
	["&approx;"] = "≈",
	["&cong;"] = "≅",
	["&isin;"] = "∈",
	["&notin;"] = "∉",
	["&empty;"] = "∅",
	["&exist;"] = "∃",
	["&forall;"] = "∀",
	["&nabla;"] = "∇",
	["&ang;"] = "∠",
	["&perp;"] = "⊥",
	["&sdot;"] = "⋅",
	-- Greek letters (commonly used in math)
	["&alpha;"] = "α",
	["&beta;"] = "β",
	["&gamma;"] = "γ",
	["&delta;"] = "δ",
	["&epsilon;"] = "ε",
	["&zeta;"] = "ζ",
	["&eta;"] = "η",
	["&theta;"] = "θ",
	["&iota;"] = "ι",
	["&kappa;"] = "κ",
	["&lambda;"] = "λ",
	["&mu;"] = "μ",
	["&nu;"] = "ν",
	["&xi;"] = "ξ",
	["&omicron;"] = "ο",
	["&pi;"] = "π",
	["&rho;"] = "ρ",
	["&sigma;"] = "σ",
	["&tau;"] = "τ",
	["&upsilon;"] = "υ",
	["&phi;"] = "φ",
	["&chi;"] = "χ",
	["&psi;"] = "ψ",
	["&omega;"] = "ω",
	-- Capital Greek letters
	["&Alpha;"] = "Α",
	["&Beta;"] = "Β",
	["&Gamma;"] = "Γ",
	["&Delta;"] = "Δ",
	["&Epsilon;"] = "Ε",
	["&Zeta;"] = "Ζ",
	["&Eta;"] = "Η",
	["&Theta;"] = "Θ",
	["&Iota;"] = "Ι",
	["&Kappa;"] = "Κ",
	["&Lambda;"] = "Λ",
	["&Mu;"] = "Μ",
	["&Nu;"] = "Ν",
	["&Xi;"] = "Ξ",
	["&Omicron;"] = "Ο",
	["&Pi;"] = "Π",
	["&Rho;"] = "Ρ",
	["&Sigma;"] = "Σ",
	["&Tau;"] = "Τ",
	["&Upsilon;"] = "Υ",
	["&Phi;"] = "Φ",
	["&Chi;"] = "Χ",
	["&Psi;"] = "Ψ",
	["&Omega;"] = "Ω",
}

-- Process all HTML entities in a text
function M.process(text)
	for pat, rep in pairs(M.html_entities) do
		text = text:gsub(pat, rep)
	end
	return text
end

return M
